{请求EDX分钟线，获取数据表并发回客户端
参数：
	obj					股票代码，例如'SH510300.fnd'
	period 			周期，例如'1d'
	starttime 	起始时间,例如'20130507103028000000'
	endtime 		结束时间,例如'20130807103028000000'
	obj2				股票代码，例如'SH510050.fnd'
	chn					1:使用obj2 其它:使用obj
}
function RequestEDXMin(obj, period, starttime, endtime, obj2, chn)
	tzone = 480;
	if(chn == 1)
		obj = obj2;
	end
	{首次加载获取历史数据并保存到数据层缓存}
	if this.FirstLoad()
		{注册最新数据推送请求}
		this.Regist('service=did&did=100230&field&response_times=-1&response_mode=0&cache_timeout=0&where=obj=' + obj + '&ds_wait_sync=2','RequestEDXMin' + obj,0);
		{保存空数据层缓存}
		result =  table::Create('',0,'data');
		this.SaveBuffer(result, 'RequestEDXMin' + obj);
		return;
	end
	

	{获取推送数据}
	data0 = this.GetPushData('RequestEDXMin' + obj);
	{收到推送数据，更新缓存表中最新数据，发回缓存表}
	if(util::GetRows(data0) > 0)
		data = data0(1,2);
		lines = util::GetRows(data);
		{加载缓存数据表}
		result = this.LoadBuffer('RequestEDXMin' + obj);
		n = util::GetRows(result);
		if(n == 0) {第一次全量数据}
			{计算差分}
			result =  table::Create('updateTime:T;data:p',lines,'data');
			for i = 1:lines
				result(i,1) = util::TimezoneAdjust(data(i,1),tzone);
				result(i,2) = (data(i,5) - data(i,8)) / '10000.0';
			end
			n = lines;
			{保存到数据层缓存}
			this.SaveBuffer(result, 'RequestEDXMin' + obj);
		else {推送增量数据}
			t = util::TimezoneAdjust(data(1,1),tzone);
			str = util::TimetToString(t,'%%Y%%m%%d%%H%%M');
			t = util::StringToTimet(str,'%%Y%%m%%d%%H%%M',0);
			if( t > result(n,1)) {得到下一天数据}
				endline = n + lines;
				{增长数据表}
				result2 =  table::Create('updateTime:T;data:p',endline,'data');
				result2(1:n,:) = result;
				for i = 1:lines
					result2(n+i,1) = util::TimezoneAdjust(data(i,1),tzone);
					result2(n+i,2) = (data(i,5) - data(i,8)) / '10000.0';
				end
				result = result2;
				n = endline;
				{保存到数据层缓存}
				this.SaveBuffer(result, 'RequestEDXMin' + obj);
			else	{仍是当前数据}
				{计算最后一列数据}
				result(n,2) = (data(1,5) - data(1,8)) / '10000.0';
				endline = n + lines - 1;
				{增长数据表}
				result2 =  table::Create('updateTime:T;data:p',endline,'data');
				result2(1:n,:) = result;
				for i = 2:lines
					result2(n+i-1,1) = util::TimezoneAdjust(data(i,1),tzone);
					result2(n+i-1,2) = (data(i,5) - data(i,8)) / '10000.0';
				end
				result = result2;
				n = endline;
				{保存到数据层缓存}
				this.SaveBuffer(result, 'RequestEDXMin' + obj);
			end
		end
		if(n > 1)
			{计算差分}
			t =  table::Create('updateTime:T;data:p',n+1,'data');
			t(1,1) = result(1,1);
			str = util::TimetToString(result(1,1),'%%Y%%m%%d');
			endtime = util::StringToTimet(str + '1459','%%Y%%m%%d%%H%%M',0);
			endline = 0;
			for i = 2:n
				if(result(i,1) > endtime)
					endline = i - 1;
					break;
				else {处理15分01秒数据}
					t(i,1) = result(i,1);
					t(i,2) = result(i,2);
					t(i,2) = t(i,2) - result(i-1,2);
					t(i,2) = t(i,2);
				end
			end
			if(endline > 0) {结尾加零发送}
				t(endline+1,1) = result(endline + 1,1);
				t(endline+1,2) = result(endline+1,2);
				t(endline+1,2) = t(endline+1,2) - result(endline,2);
				t(endline+1,2) = t(endline+1,2);
				str = util::TimetToString(t(endline+1,1),'%%Y%%m%%d%%H%%M');
				t(endline+2,1) = util::StringToTimet(str + '30','%%Y%%m%%d%%H%%M%%S',0);
				{发回缓存表}
				this.Send(t(1:endline+2,:));
			else
				str = util::TimetToString(t(n,1),'%%Y%%m%%d%%H%%M');
				t(n+1,1) = util::StringToTimet(str + '30','%%Y%%m%%d%%H%%M%%S',0);
				{发回缓存表}
				this.Send(t);
			end
		end
	else
		{加载缓存数据表}
		result = this.LoadBuffer('RequestEDXMin' + obj);
		n = util::GetRows(result);
		if(n == 0) {返回空表}
			{计算差分}
			t =  table::Create('updateTime:T;data:p',n+1,'data');
			t(1,1) = util::StringToTimet(starttime,'%%Y%%m%%d%%H%%M%%S',0);
			this.Send(t);
		end
	end
end